package pattern

import "fmt"

/*
	Реализовать паттерн «комманда».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Command_pattern

	Команда — поведенческий паттерн проектирования, который превращает запросы в объекты, позволяя передавать их как аргументы при вызове методов,
ставить запросы в очередь, логировать их, а также поддерживать отмену операций.

	Применимость:
Когда мы хотим параметризовать объекты выполняемым действием.
Когда мы хотим ставить операцию в очередь, выполнять их по расписанию или передавать по сети.
Когда нам нужна операция отмены.
	Плюсы:
 Убирает прямую зависимость между объектами, вызывающими операции, и объектами, которые их непосредственно выполняют.
 Позволяет реализовать простую отмену и повтор операций.
 Позволяет реализовать отложенный запуск операций.
 Позволяет собирать сложные команды из простых.
 Реализует принцип открытости/закрытости.
	Минусы:
 Усложняет код программы из-за введения множества дополнительных классов.
*/

type Command interface {
	Execute()
}

type LightOnCommand struct {
	Light *Light
}

func (l *LightOnCommand) Execute() {
	l.Light.TurnOn()
}

type Light struct {
}

func (l *Light) TurnOn() {
	fmt.Println("Light is on")
}

type RemoteControl struct {
	Command Command
}

func (r *RemoteControl) PressButton() {
	r.Command.Execute()
}

func main() {
	light := &Light{}

	// Создание команды и связывание с получателем
	lightOnCommand := &LightOnCommand{Light: light}

	// Создание и настройка инициатора команды
	remote := &RemoteControl{Command: lightOnCommand}

	// Вызов команды через инициатора
	remote.PressButton()
}
